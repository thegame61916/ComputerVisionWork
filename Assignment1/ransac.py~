# Program to implement ransac to caliberate camera

from random import randint
from numpy import *
import numpy as np
from scipy import linalg
import math

A =[]
x = [[4731, 2453], [4873,1407], [4914, 564], [4010, 2073], [4826, 2141], [4642, 2800], [3874, 2379], [3038,2304], [4037, 1325], [4064,509], [3242, 475], [2440,1216], [3731,2712],[1155,2460], [2637,3004], [836,2807], [475,3222], [897,333]]
X = [[0, 0, 36], [0,36,0], [0,72,0], [36,0,0], [0,0,0], [0,0,72], [36,0, 36], [72,0,36], [36,36,0], [36,72,0], [72,72,0],[108,36,0], [36,0,72], [140,0,72],[72,0,108],[144,0,108], [144,0,144], [180,72,0]]

def addPointToA(x,X):
	l = [X[0],X[1],X[2],1,0,0,0,0,-1*x[0]*X[0], -1 * x[0]*X[1], -1*x[0]*X[2], -1*x[0]]
	A.append(l)
	l = [0,0,0,0,X[0],X[1],X[2],1,-1*x[1]*X[0], -1 * x[1]*X[1], -1*x[1]*X[2], -1*x[1]]
	A.append(l)
	
def prepareA():
	d ={}
	for i in range(6):
		t = randint(0,17)
		while t in d:
			t = randint(0,17)
		d[t] = 1
		addPointToA(x[t], X[t])

P = []
threshold = 1
def getTotalError():
	dist = 0
	for i in range(0,12,2):
		WP = [A[i][0], A[i][1], A[i][2]]
		y = np.dot(P, WP + [1]) 
		dist += (-1 * A[i][11] - y[0]/y[2]) * (-1 * A[i][11] - y[0]/y[2]) + (-1 * A[i+1][11] - y[1]/y[2]) * (-1 * A[i+1][11] - y[1]/y[2])		
	return math.sqrt(dist)
	
while 1:
	A = []
	prepareA()
	U,s,V = linalg.svd(A)
	P = V[-1].reshape((3,4))		
	if(getTotalError() <= threshold):
		break;
	
	
M =[]
for i in P:
	M.append(i[0:3])

r, q = linalg.rq(M)
	
print 'Projection matrix is:'
print P
print 'camera intrinsic parameters are:'
print r
print 
print 'camera extrinsic parameters are:'
print q

print 'Image points calculated using this camera matrix:'
for i in range(6):
	y = np.dot(P, X[i] + [1])
	print 'World point: %s' % X[i]
	print 'Actual Image point: %s' % x[i]
	l = [y[0]/y[2], y[1]/y[2]]
	print 'Calculated point: %s' % l
	print
